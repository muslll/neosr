
name: train_srformer
model_type: default
scale: 4
num_gpu: 1
use_amp: true
bfloat16: false
compile: false
#manual_seed: 1024

datasets:
  train:
    type: paired
    dataroot_gt: 'datasets/gt/'
    dataroot_lq: 'datasets/lq/'
    #meta_info: 'datasets/meta_info.txt'
    io_backend:
      type: disk

    gt_size: 128
    batch_size: 6
    use_hflip: true
    use_rot: true
    num_worker_per_gpu: 4
    dataset_enlarge_ratio: 5

#  val:
#    name: val_1
#    type: paired 
#    dataroot_gt: 'datasets/val/gt/'
#    dataroot_lq: 'datasets/val/lq/'
#    io_backend:
#      type: disk
#val:
#  val_freq: 1000
#  save_img: true
#  metrics:
#    psnr:
#      type: calculate_psnr
#    ssim:
#      type: calculate_ssim

path:
  #pretrain_network_g: 'experiments/pretrain.pth'
  resume_state: ~
  #strict_load_g: false # do not uncomment, read docs

network_g:
  type: srformer_light
  #type: srformer_medium

network_d:
  type: unet

train:
  optim_g:
    type: adamw
    lr: !!float 3e-4
    weight_decay: 0
    betas: [0.9, 0.99]
  optim_d:
    type: adamw
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: multisteplr
    milestones: [60000, 120000]
    gamma: 0.5

  total_iter: 500000
  accum_iter: 1 # number of batches to iterate before applying gradient
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: HuberLoss
    loss_weight: 1.0
  perceptual_opt:
    type: PerceptualLoss
    layer_weights:
      'conv1_2': 0.1
      'conv2_2': 0.1
      'conv3_4': 1
      'conv4_4': 1
      'conv5_4': 1
    perceptual_weight: 1.0
    style_weight: 0
    criterion: huber
  gan_opt:
    type: GANLoss
    gan_type: vanilla
    loss_weight: 0.1
  color_opt:
    type: colorloss
    loss_weight: 1.0
    criterion: huber
  #ldl_opt:
  #  type: HuberLoss
  #  loss_weight: 1.0
  #ff_opt:
  #  type: focalfrequencyloss
  #  loss_weight: 0.5

logger:
  print_freq: 100
  save_checkpoint_freq: 1000
  use_tb_logger: true
  #wandb:
  #  project: ~
  #  resume_id: ~

# dist training settings
#dist_params:
#  backend: nccl
#  port: 29500
